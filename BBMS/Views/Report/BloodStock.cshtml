@using BBMS.Models
@model List<dynamic>
@{
    ViewBag.Title = "BloodStock";
}

<h2 class="page-title">Blood Stock Report</h2>

@using (Html.BeginForm())
{
    <div class="form-horizontal">
        <h4>Stock Report</h4>
        <hr />
        <div class="form-group">
            @Html.Label("Blood Usage:", htmlAttributes: new { @class = "control-lable col-md-2" })
            <div class="col-md-10">
                <div class="col-md-3">
                    Is Used <input class="radio-inline" name="IsUsed" value="True" type="radio" />
                </div>
                <div class="col-md-3">
                    Is Not Used <input class="radio-inline" name="IsUsed" value="False" type="radio" />
                </div>
            </div>

        </div>
        <div class="form-group">
            @Html.Label("Hemoglobin Range:", htmlAttributes: new { @class = "control-lable col-md-2" })
            <div class="col-md-2">
                @Html.TextBox("RangeFrom", null, new { @class = "form-control"})            
            </div>
            @Html.Label("To", htmlAttributes: new { @class = "control-lable col-md-1" })
            <div class="col-md-2">
                @Html.TextBox("RangeTo", null, new { @class = "form-control"})            
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Get Report" class="btn btn-default" />
            </div>
        </div>
    </div>

    if (Model != null)
    {
        <div class="export-btn">
            <button type="button" class="btn btn-default" onclick="javascript:demoFromHTML();">
                <i class="glyphicon glyphicon-file"></i>
                Export
            </button>
        </div>
        <div id="Donors">
            <img src="~/Content/logo.png" style="margin: 0px auto;display: block;" width="90" height="90" />

            <table class="table table-bordered" style="font-size:10pt;width:200px;margin:0px auto">
                <tr>
                    <th>Blood Type</th>
                    <th>Stock</th>                    
                </tr>
                @{
                    foreach (var item in Model)
                    {
                        <tr>
                            <td>
                            <span>@item.TypeGroup</span></td>
                            <td><span>@item.Stock</span></td>                           
                        </tr>
                    }
                }
            </table>
        </div>
                        }


                    }
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script src="~/Scripts/jspdf.debug.js"></script>
<script type="text/javascript">
   
    function demoFromHTML() {
        var pdf = new jsPDF('p', 'pt', 'a4');
        pdf.text(155, 40, "Blood Stock Report");
        pdf.setFontSize(10);
        // source can be HTML-formatted string, or a reference
        // to an actual DOM element from which the text will be scraped.
        source = $('#Donors')[0];

        // we support special element handlers. Register them with jQuery-style
        // ID selector for either ID or node name. ("#iAmID", "div", "span" etc.)
        // There is no support for any other type of selectors
        // (class, of compound) at this time.
        specialElementHandlers = {
            // element with id of "bypass" - jQuery style selector
            '#bypassme': function (element, renderer) {
                // true = "handled elsewhere, bypass text extraction"
                return true
            }
        };
        margins = {
            top: 100,
            bottom: 30,
            left: 30,
            width: 100
        };
        // all coords and widths are in jsPDF instance's declared units
        // 'inches' in this case
        pdf.fromHTML(
        source, // HTML string or DOM elem ref.
        margins.left, // x coord
        margins.top, { // y coord
            'width': margins.width, // max width of content on PDF
            'elementHandlers': specialElementHandlers
        },

        function (dispose) {
            // dispose: object with X, Y of the last line add to the PDF
            //          this allow the insertion of new lines after html
            pdf.save('Blood_Stock_Report.pdf');
        }, margins);
    }
</script>


